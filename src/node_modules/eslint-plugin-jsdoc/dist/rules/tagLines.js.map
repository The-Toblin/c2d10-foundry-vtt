{"version":3,"sources":["../../src/rules/tagLines.js"],"names":["context","jsdoc","utils","alwaysNever","count","dropEndLines","noEndLines","tags","options","some","tg","tagIdx","lastTag","lastEmpty","reportIndex","idx","tokens","tag","name","type","description","end","source","entries","includes","slice","lines","empty","length","fixer","removeTagItem","reportJSDoc","line","number","currentTag","tagSourceIdx","splice","push","currentTg","tagCount","defaultAlways","overrideAlways","fixCount","addLines","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","additionalProperies","properties","patternProperties","additionalProperties"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  utils,\n}) => {\n  const [\n    alwaysNever = 'never',\n    {\n      count = 1,\n      dropEndLines = false,\n      noEndLines = false,\n      tags = {},\n    } = {},\n  ] = context.options;\n\n  jsdoc.tags.some((tg, tagIdx) => {\n    let lastTag;\n    let lastEmpty = null;\n\n    let reportIndex = null;\n    for (const [\n      idx,\n      {\n        tokens: {\n          tag,\n          name,\n          type,\n          description,\n          end,\n        },\n      },\n    ] of tg.source.entries()) {\n      // May be text after a line break within a tag description\n      if (description) {\n        reportIndex = null;\n      }\n\n      if (lastTag && [\n        'any', 'always',\n      ].includes(tags[lastTag.slice(1)]?.lines)) {\n        continue;\n      }\n\n      const empty = !tag && !name && !type && !description;\n      if (\n        empty && !end &&\n        (alwaysNever === 'never' ||\n          lastTag && tags[lastTag.slice(1)]?.lines === 'never'\n        )\n      ) {\n        reportIndex = idx;\n\n        continue;\n      }\n\n      if (!end) {\n        lastEmpty = empty ? idx : null;\n      }\n\n      lastTag = tag;\n    }\n\n    if (dropEndLines && lastEmpty !== null && tagIdx === jsdoc.tags.length - 1) {\n      const fixer = () => {\n        utils.removeTagItem(tagIdx, lastEmpty);\n      };\n\n      utils.reportJSDoc(\n        'Expected no trailing lines',\n        {\n          line: tg.source[lastEmpty].number,\n        },\n        fixer,\n      );\n\n      return true;\n    }\n\n    if (reportIndex !== null) {\n      const fixer = () => {\n        utils.removeTagItem(tagIdx, reportIndex);\n      };\n\n      utils.reportJSDoc(\n        'Expected no lines between tags',\n        {\n          line: tg.source[0].number + 1,\n        },\n        fixer,\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n\n  (noEndLines ? jsdoc.tags.slice(0, -1) : jsdoc.tags).some((tg, tagIdx) => {\n    const lines = [];\n\n    let currentTag;\n    let tagSourceIdx = 0;\n    for (const [\n      idx,\n      {\n        number,\n        tokens: {\n          tag,\n          name,\n          type,\n          description,\n          end,\n        },\n      },\n    ] of tg.source.entries()) {\n      if (description) {\n        lines.splice(0, lines.length);\n        tagSourceIdx = idx;\n      }\n\n      if (tag) {\n        currentTag = tag;\n      }\n\n      if (!tag && !name && !type && !description && !end) {\n        lines.push({\n          idx,\n          number,\n        });\n      }\n    }\n\n    const currentTg = currentTag && tags[currentTag.slice(1)];\n    const tagCount = currentTg?.count;\n\n    const defaultAlways = alwaysNever === 'always' && currentTg?.lines !== 'never' &&\n      currentTg?.lines !== 'any' && lines.length < count;\n\n    let overrideAlways;\n    let fixCount = count;\n    if (!defaultAlways) {\n      fixCount = typeof tagCount === 'number' ? tagCount : count;\n      overrideAlways = currentTg?.lines === 'always' &&\n        lines.length < fixCount;\n    }\n\n    if (defaultAlways || overrideAlways) {\n      const fixer = () => {\n        utils.addLines(tagIdx, lines[lines.length - 1]?.idx || tagSourceIdx + 1, fixCount - lines.length);\n      };\n\n      const line = lines[lines.length - 1]?.number || tg.source[tagSourceIdx].number;\n      utils.reportJSDoc(\n        `Expected ${fixCount} line${fixCount === 1 ? '' : 's'} between tags but found ${lines.length}`,\n        {\n          line,\n        },\n        fixer,\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Enforces lines (or no lines) between tags.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-tag-lines',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        enum: [\n          'always', 'any', 'never',\n        ],\n        type: 'string',\n      },\n      {\n        additionalProperies: false,\n        properties: {\n          count: {\n            type: 'integer',\n          },\n          dropEndLines: {\n            type: 'boolean',\n          },\n          noEndLines: {\n            type: 'boolean',\n          },\n          tags: {\n            patternProperties: {\n              '.*': {\n                additionalProperties: false,\n                properties: {\n                  count: {\n                    type: 'integer',\n                  },\n                  lines: {\n                    enum: [\n                      'always', 'never', 'any',\n                    ],\n                    type: 'string',\n                  },\n                },\n              },\n            },\n            type: 'object',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"tagLines.js"}