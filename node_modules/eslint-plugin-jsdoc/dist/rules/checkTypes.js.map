{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["strictNativeTypes","adjustNames","type","preferred","isGenericMatch","typeNodeName","node","parentNode","ret","meta","brackets","dot","dotBracketEnd","match","slice","length","bracketEnd","endsWith","value","replace","jsdocNode","sourceCode","report","utils","settings","context","jsdocTagsWithPossibleType","filterTags","tag","tagMightHaveTypePosition","preferredTypes","preferredTypesOriginal","structuredTags","mode","injectObjectPreferredTypes","Object","noDefaults","unifyParentAndChildTypeChecks","exemptTagContexts","options","getPreferredTypeInfo","_type","property","hasMatchingPreferredType","typeName","isNameOfGeneric","undefined","checkPostFixes","some","checkPostFix","directNameMatch","values","includes","unifiedSyntaxParentMatch","checkNativeTypes","invalidTypes","changedPreferred","strictNativeType","elements","left","toLowerCase","push","getInvalidTypes","tagName","types","preferredSetting","replacement","message","reportSettings","entries","typs","Array","isArray","jsdocTag","typeAst","fixedType","fix","fixer","replaceText","getText","badType","preferredType","tagValue","name","JSON","stringify","iterateAllJsdocs","docs","description","url","fixable","schema","additionalProperties","properties","items","oneOf"],"mappings":"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","sourcesContent":["import {\n  parse,\n  stringify,\n  traverse,\n  tryParse,\n} from '@es-joy/jsdoccomment';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst strictNativeTypes = [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'bigint',\n  'string',\n  'symbol',\n  'object',\n  'Array',\n  'Function',\n  'Date',\n  'RegExp',\n];\n\n/**\n * Adjusts the parent type node `meta` for generic matches (or type node\n * `type` for `JsdocTypeAny`) and sets the type node `value`.\n *\n * @param {string} type The actual type\n * @param {string} preferred The preferred type\n * @param {boolean} isGenericMatch\n * @param {string} typeNodeName\n * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} node\n * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n * @returns {void}\n */\nconst adjustNames = (type, preferred, isGenericMatch, typeNodeName, node, parentNode) => {\n  let ret = preferred;\n  if (isGenericMatch) {\n    if (preferred === '[]') {\n      parentNode.meta.brackets = 'square';\n      parentNode.meta.dot = false;\n      ret = 'Array';\n    } else {\n      const dotBracketEnd = preferred.match(/\\.(?:<>)?$/u);\n      if (dotBracketEnd) {\n        parentNode.meta.brackets = 'angle';\n        parentNode.meta.dot = true;\n        ret = preferred.slice(0, -dotBracketEnd[0].length);\n      } else {\n        const bracketEnd = preferred.endsWith('<>');\n        if (bracketEnd) {\n          parentNode.meta.brackets = 'angle';\n          parentNode.meta.dot = false;\n          ret = preferred.slice(0, -2);\n        } else if (\n          parentNode.meta.brackets === 'square' &&\n          (typeNodeName === '[]' || typeNodeName === 'Array')\n        ) {\n          parentNode.meta.brackets = 'angle';\n          parentNode.meta.dot = false;\n        }\n      }\n    }\n  } else if (type === 'JsdocTypeAny') {\n    node.type = 'JsdocTypeName';\n  }\n\n  node.value = ret.replace(/(?:\\.|<>|\\.<>|\\[\\])$/u, '');\n\n  // For bare pseudo-types like `<>`\n  if (!ret) {\n    node.value = typeNodeName;\n  }\n};\n\nexport default iterateJsdoc(({\n  jsdocNode,\n  sourceCode,\n  report,\n  utils,\n  settings,\n  context,\n}) => {\n  const jsdocTagsWithPossibleType = utils.filterTags((tag) => {\n    return utils.tagMightHaveTypePosition(tag.tag);\n  });\n\n  const {\n    preferredTypes: preferredTypesOriginal,\n    structuredTags,\n    mode,\n  } = settings;\n\n  const injectObjectPreferredTypes = !('Object' in preferredTypesOriginal ||\n    'object' in preferredTypesOriginal ||\n    'object.<>' in preferredTypesOriginal ||\n    'Object.<>' in preferredTypesOriginal ||\n    'object<>' in preferredTypesOriginal);\n\n  const preferredTypes = {\n    ...injectObjectPreferredTypes ? {\n      Object: 'object',\n      'object.<>': 'Object<>',\n      'Object.<>': 'Object<>',\n      'object<>': 'Object<>',\n    } : {},\n    ...preferredTypesOriginal,\n  };\n\n  const {\n    noDefaults,\n    unifyParentAndChildTypeChecks,\n    exemptTagContexts = [],\n  } = context.options[0] || {};\n\n  /**\n   * Gets information about the preferred type: whether there is a matching\n   * preferred type, what the type is, and whether it is a match to a generic.\n   *\n   * @param {string} _type Not currently in use\n   * @param {string} typeNodeName\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n   * @param {string} property\n   * @returns {[hasMatchingPreferredType: boolean, typeName: string, isGenericMatch: boolean]}\n   */\n  const getPreferredTypeInfo = (_type, typeNodeName, parentNode, property) => {\n    let hasMatchingPreferredType = false;\n    let isGenericMatch = false;\n    let typeName = typeNodeName;\n\n    const isNameOfGeneric = parentNode !== undefined && parentNode.type === 'JsdocTypeGeneric' && property === 'left';\n    if (unifyParentAndChildTypeChecks || isNameOfGeneric) {\n      const brackets = parentNode?.meta?.brackets;\n      const dot = parentNode?.meta?.dot;\n\n      if (brackets === 'angle') {\n        const checkPostFixes = dot ? [\n          '.', '.<>',\n        ] : [\n          '<>',\n        ];\n        isGenericMatch = checkPostFixes.some((checkPostFix) => {\n          if (preferredTypes?.[typeNodeName + checkPostFix] !== undefined) {\n            typeName += checkPostFix;\n\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      if (!isGenericMatch && property) {\n        const checkPostFixes = dot ? [\n          '.', '.<>',\n        ] : [\n          brackets === 'angle' ? '<>' : '[]',\n        ];\n\n        isGenericMatch = checkPostFixes.some((checkPostFix) => {\n          if (preferredTypes?.[checkPostFix] !== undefined) {\n            typeName = checkPostFix;\n\n            return true;\n          }\n\n          return false;\n        });\n      }\n    }\n\n    const directNameMatch = preferredTypes?.[typeNodeName] !== undefined &&\n      !Object.values(preferredTypes).includes(typeNodeName);\n    const unifiedSyntaxParentMatch = property && directNameMatch && unifyParentAndChildTypeChecks;\n    isGenericMatch = isGenericMatch || unifiedSyntaxParentMatch;\n\n    hasMatchingPreferredType = isGenericMatch ||\n      directNameMatch && !property;\n\n    return [\n      hasMatchingPreferredType, typeName, isGenericMatch,\n    ];\n  };\n\n  /**\n   * Iterates strict types to see if any should be added to `invalidTypes` (and\n   * the the relevant strict type returned as the new preferred type).\n   *\n   * @param {string} typeNodeName\n   * @param {string} preferred\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n   * @param {string[]} invalidTypes\n   * @returns {string} The `preferred` type string, optionally changed\n   */\n  const checkNativeTypes = (typeNodeName, preferred, parentNode, invalidTypes) => {\n    let changedPreferred = preferred;\n    for (const strictNativeType of strictNativeTypes) {\n      if (\n        strictNativeType === 'object' &&\n        (\n          // This is not set to remap with exact type match (e.g.,\n          //   `object: 'Object'`), so can ignore (including if circular)\n          !preferredTypes?.[typeNodeName] ||\n          // Although present on `preferredTypes` for remapping, this is a\n          //   parent object without a parent match (and not\n          //   `unifyParentAndChildTypeChecks`) and we don't want\n          //   `object<>` given TypeScript issue https://github.com/microsoft/TypeScript/issues/20555\n          parentNode?.elements?.length && (\n            parentNode?.left?.type === 'JsdocTypeName' &&\n            parentNode?.left?.value === 'Object'\n          )\n        )\n      ) {\n        continue;\n      }\n\n      if (strictNativeType !== typeNodeName &&\n        strictNativeType.toLowerCase() === typeNodeName.toLowerCase() &&\n\n        // Don't report if user has own map for a strict native type\n        (!preferredTypes || preferredTypes?.[strictNativeType] === undefined)\n      ) {\n        changedPreferred = strictNativeType;\n        invalidTypes.push([\n          typeNodeName, changedPreferred,\n        ]);\n        break;\n      }\n    }\n\n    return changedPreferred;\n  };\n\n  /**\n   * Collect invalid type info.\n   *\n   * @param {string} type\n   * @param {string} value\n   * @param {string} tagName\n   * @param {string} property\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} node\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n   * @param {string[]} invalidTypes\n   * @returns {void}\n   */\n  const getInvalidTypes = (type, value, tagName, property, node, parentNode, invalidTypes) => {\n    let typeNodeName = type === 'JsdocTypeAny' ? '*' : value;\n\n    const [\n      hasMatchingPreferredType,\n      typeName,\n      isGenericMatch,\n    ] = getPreferredTypeInfo(type, typeNodeName, parentNode, property);\n\n    let preferred;\n    let types;\n    if (hasMatchingPreferredType) {\n      const preferredSetting = preferredTypes[typeName];\n      typeNodeName = typeName === '[]' ? typeName : typeNodeName;\n\n      if (!preferredSetting) {\n        invalidTypes.push([\n          typeNodeName,\n        ]);\n      } else if (typeof preferredSetting === 'string') {\n        preferred = preferredSetting;\n        invalidTypes.push([\n          typeNodeName, preferred,\n        ]);\n      } else if (typeof preferredSetting === 'object') {\n        preferred = preferredSetting?.replacement;\n        invalidTypes.push([\n          typeNodeName,\n          preferred,\n          preferredSetting?.message,\n        ]);\n      } else {\n        utils.reportSettings(\n          'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.',\n        );\n\n        return;\n      }\n    } else if (Object.entries(structuredTags).some(([\n      tag,\n      {\n        type: typs,\n      },\n    ]) => {\n      types = typs;\n\n      return tag === tagName &&\n        Array.isArray(types) &&\n        !types.includes(typeNodeName);\n    })) {\n      invalidTypes.push([\n        typeNodeName, types,\n      ]);\n    } else if (!noDefaults && type === 'JsdocTypeName') {\n      preferred = checkNativeTypes(typeNodeName, preferred, parentNode, invalidTypes);\n    }\n\n    // For fixer\n    if (preferred) {\n      adjustNames(type, preferred, isGenericMatch, typeNodeName, node, parentNode);\n    }\n  };\n\n  for (const jsdocTag of jsdocTagsWithPossibleType) {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = mode === 'permissive' ? tryParse(jsdocTag.type) : parse(jsdocTag.type, mode);\n    } catch {\n      continue;\n    }\n\n    const tagName = jsdocTag.tag;\n\n    traverse(typeAst, (node, parentNode, property) => {\n      const {\n        type,\n        value,\n      } = node;\n      if (![\n        'JsdocTypeName', 'JsdocTypeAny',\n      ].includes(type)) {\n        return;\n      }\n\n      getInvalidTypes(type, value, tagName, property, node, parentNode, invalidTypes);\n    });\n\n    if (invalidTypes.length) {\n      const fixedType = stringify(typeAst);\n\n      /**\n       * @param {any} fixer The ESLint fixer\n       * @returns {string}\n       */\n      const fix = (fixer) => {\n        return fixer.replaceText(\n          jsdocNode,\n          sourceCode.getText(jsdocNode).replace(\n            `{${jsdocTag.type}}`,\n            `{${fixedType}}`,\n          ),\n        );\n      };\n\n      for (const [\n        badType,\n        preferredType = '',\n        message,\n      ] of invalidTypes) {\n        const tagValue = jsdocTag.name ? ` \"${jsdocTag.name}\"` : '';\n        if (exemptTagContexts.some(({\n          tag,\n          types,\n        }) => {\n          return tag === tagName &&\n            (types === true || types.includes(jsdocTag.type));\n        })) {\n          continue;\n        }\n\n        report(\n          message ||\n            `Invalid JSDoc @${tagName}${tagValue} type \"${badType}\"` +\n            (preferredType ? '; ' : '.') +\n            (preferredType ? `prefer: ${JSON.stringify(preferredType)}.` : ''),\n          preferredType ? fix : null,\n          jsdocTag,\n          message ? {\n            tagName,\n            tagValue,\n          } : null,\n        );\n      }\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Reports invalid types.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-types',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          exemptTagContexts: {\n            items: {\n              additionalProperties: false,\n              properties: {\n                tag: {\n                  type: 'string',\n                },\n                types: {\n                  oneOf: [\n                    {\n                      type: 'boolean',\n                    },\n                    {\n                      items: {\n                        type: 'string',\n                      },\n                      type: 'array',\n                    },\n                  ],\n                },\n              },\n              type: 'object',\n            },\n            type: 'array',\n          },\n          noDefaults: {\n            type: 'boolean',\n          },\n          unifyParentAndChildTypeChecks: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkTypes.js"}